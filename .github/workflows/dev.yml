name: Dev CI-CD
on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Please select your command'
        type: choice
        options:
          - UPDATE
          - MIGRATE
          - FRESH
          - SETUP
      build:
        description: 'Build new image'
        type: boolean
        default: true
env:
  REGION: eu-central-1
  PLATFORM: dev
  REPO_NAME: ${{ github.event.repository.name }} # Or use: ${GITHUB_REPOSITORY##*/}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read

jobs:
  build:
    name: Build
    if: inputs.build == true
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{secrets.ACCOUNT_ID_DEV}}:role/platform-github-action-role-${{env.PLATFORM}}
          aws-region: ${{ env.REGION }}
          role-duration-seconds: 3600

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get image tag
        id: get-image-tag
        run: |
          IMAGE_TAG=${{env.PLATFORM}}-${GITHUB_SHA::8}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Check if image exists
        id: check-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPO_NAME }}-${{env.PLATFORM}}
        run: |
          if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=${{env.IMAGE_TAG}} 2>/dev/null; then
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: If skip build or image exists, set image tag to latest remote
        id: get-latest-image-tag
        if: inputs.build == false || steps.check-image.outputs.image_exists == 'true'
        run: |
          LATEST_TAG=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
          echo "IMAGE_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "image_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        if: steps.check-image.outputs.image_exists == 'false' && inputs.build == true
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPO_NAME }}-${{env.PLATFORM}}
          COMMAND: ${{ inputs.env }}
        run: |
          docker build --build-arg COMMAND_TYPE=$COMMAND -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}

      - uses: act10ns/slack@v1
        if: always()
        with:
          status: ${{ job.status }}
          channel: 'n-platform-deployments'
          config: .github/config/slack.yml
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}

    outputs:
      image_tag: ${{ steps.get-latest-image-tag.outputs.image_tag || steps.get-image-tag.outputs.image_tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: always() && !cancelled()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{secrets.ACCOUNT_ID_DEV}}:role/platform-github-action-role-${{env.PLATFORM}}
          aws-region: ${{ env.REGION }}
          role-duration-seconds: 3600

      - uses: actions/checkout@v4

      - name: Get Latest Image ARN
        id: get-image-arn
        env:
          IMAGE_TAG: ${{ steps.get-latest-image-tag.outputs.image_tag || needs.build.outputs.image_tag }}
          ECR_REPOSITORY: ${{ env.REPO_NAME }}-${{env.PLATFORM}}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Get full image URI
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          # Verify image exists
          if ! aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG >/dev/null 2>&1; then
            echo "Error: Image tag $IMAGE_TAG not found in repository"
            exit 1
          fi

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Create Task Definition
        id: task-def
        run: |
          MIGRATE_SETUP='node -e "require('\''./generated/src/db/Migrations.bs.js'\'').setupDb()"'
          MIGRATE_UP='node -e "require('\''./generated/src/db/Migrations.bs.js'\'').runUpMigrations(true)"'
          MIGRATE_DOWN='node -e "require('\''./generated/src/db/Migrations.bs.js'\'').runDownMigrations(true)"'
          GRANT_PERMISSIONS='pnpm ts-node scripts/grant-aggregate-permissions.ts'
          RUN_INDEXER='TUI_OFF=true pnpm ts-node generated/src/Index.bs.js'

          case "${{ inputs.env }}" in
            "SETUP")
              CMD="$MIGRATE_SETUP && $GRANT_PERMISSIONS && $RUN_INDEXER"
              ;;
            "MIGRATE")
              CMD="$MIGRATE_UP && $RUN_INDEXER"
              ;;
            "FRESH")
              CMD="$MIGRATE_DOWN && $MIGRATE_UP && $RUN_INDEXER"
              ;;
            "UPDATE")
              CMD="$RUN_INDEXER"
              ;;
            *)
              echo "Invalid command type" && exit 1
              ;;
          esac

          # Get current task definition and remove AWS-specific fields
          aws ecs describe-task-definition --task-definition indexer-dev --query 'taskDefinition' > task-definition-full.json

          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-definition-full.json > task-definition.json

          # Update the command and image in the indexer-dev container using IMAGE_URI
          jq --arg cmd "$CMD" --arg img "${{ env.IMAGE_URI }}" '(.containerDefinitions[] | select(.name == "indexer-dev") | .command) = ["sh", "-c", $cmd] | (.containerDefinitions[] | select(.name == "indexer-dev") | .image) = $img' task-definition.json > updated-task-definition.json
          mv updated-task-definition.json task-definition.json

          # Store the task definition ARN
          echo "TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{env.PLATFORM}}-services-cluster \
            --service ${{ env.REPO_NAME }}-${{env.PLATFORM}} \
            --task-definition ${{ env.TASK_DEFINITION_ARN }} \
            --force-new-deployment

      - name: Wait for service stability
        timeout-minutes: 10
        run: |
          aws ecs wait services-stable \
            --cluster ${{env.PLATFORM}}-services-cluster \
            --services ${{ env.REPO_NAME }}-${{env.PLATFORM}}

      - name: Slack Notification
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          channel: 'n-platform-deployments'
          config: .github/config/slack.yml
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          steps: ${{ toJson(steps) }}
        if: always()
