name: Dev CI-CD
on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Please select your command'
        type: choice
        options:
          - UPDATE
          - MIGRATE
          - FRESH
          - SETUP
env:
  REGION: eu-central-1
  PLATFORM: dev

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{secrets.ACCOUNT_ID_DEV}}:role/platform-github-action-role-${{env.PLATFORM}}
          aws-region: ${{ env.REGION }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: get-name
        run: |
          echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.REPO_NAME }}-${{env.PLATFORM}}
          COMMAND: ${{ inputs.env }}
        run: |
          docker build --build-arg COMMAND_TYPE=$COMMAND -t $ECR_REGISTRY/$ECR_REPOSITORY:${{env.PLATFORM}}-${GITHUB_SHA::8} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{env.PLATFORM}}-${GITHUB_SHA::8}

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          channel: 'n-platform-deployments'
          config: .github/config/slack.yml
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{secrets.ACCOUNT_ID_DEV}}:role/platform-github-action-role-${{env.PLATFORM}}
          aws-region: ${{ env.REGION }}
          role-duration-seconds: 1200

      - name: get-name
        run: |
          echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: ECS Deploy to DEV
        id: ecs-deploy
        run: |
          pip install ecs-deploy
          ecs deploy ${{env.PLATFORM}}-services-cluster ${{ env.REPO_NAME }}-${{env.PLATFORM}} --image ${{ env.REPO_NAME }}-${{env.PLATFORM}} ${{secrets.ACCOUNT_ID_DEV}}.dkr.ecr.${{ env.REGION }}.amazonaws.com/${{ env.REPO_NAME }}-${{env.PLATFORM}}:${{env.PLATFORM}}-${GITHUB_SHA::8} --timeout -1

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: n-platform-deployments
          SLACK_ICON: https://pbs.twimg.com/profile_images/1323610441088671745/UTLvNRUK_400x400.jpg
          SLACK_USERNAME: inverter_cibot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ steps.ecs-deploy.outcome == 'success' && job.status || '#ff0000' }}
          SLACK_MESSAGE: ${{ steps.ecs-deploy.outcome == 'success' && 'Deployment has been completed successfully :rocket:' || 'Deployment has not been completed...Please check CI Action :x:' }}
          SLACK_TITLE: Message
        if: always()

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          channel: 'n-platform-deployments'
          config: .github/config/slack.yml
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          steps: ${{ toJson(steps) }}
        if: always()
