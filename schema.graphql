## GENERAL ENTITIES
## ------------------------------------------------------------

type Workflow {
  # orchestratorAddress
  id: ID!
  orchestratorId: BigInt!
  fundingManager: WorkflowModule!
  authorizer: WorkflowModule!
  paymentProcessor: WorkflowModule!
  optionalModules: [String!]
  chainId: Int!
}

type WorkflowModuleType {
  # identifier is keccak256 hash of parts of metadata
  id: ID!
  majorVersion: BigInt!
  minorVersion: BigInt!
  patchVersion: BigInt!
  url: String!
  beacon: String!
  name: String!
  chainId: Int!
}

type WorkflowModule {
  # address of module
  id: ID!
  orchestrator: String!
  moduleType: WorkflowModuleType!
  chainId: Int!
}

## BONDING CURVE RELATED
## ------------------------------------------------------------

type BondingCurve {
  # address of module
  id: ID!
  chainId: Int!
  # Workflow struct
  workflow: Workflow!
  collateralToken: String
  collateralTokenDecimals: Int
  buyFee: BigInt
  # restricted or not restricted
  bcType: String
  sellFee: BigInt
  virtualCollateral: Float
  virtualCollateralRaw: BigInt
  virtualIssuance: Float
  buyReserveRatio: BigInt
  sellReserveRatio: BigInt
  issuanceToken: String
  issuanceTokenDecimals: Int
  swaps: [Swap!]! @derivedFrom(field: "bondingCurve")
  feeClaim: [FeeClaim!]! @derivedFrom(field: "bondingCurve")
}

enum SwapType {
  BUY
  SELL
}

type Swap {
  id: ID!
  bondingCurve: BondingCurve!
  swapType: SwapType!
  issuanceAmount: Float!
  issuanceToken: String!
  collateralAmount: Float!
  collateralToken: String!
  priceInCol: Float!
  initiator: String!
  recipient: String!
  blockTimestamp: Int!
  chainId: Int!
}

type FeeClaim {
  id: ID!
  bondingCurve: BondingCurve!
  amount: Float!
  blockTimestamp: Int!
  chainId: Int!
  recipient: String!
}

## VESTING RELATED
## ------------------------------------------------------------

type StreamingPaymentProcessor {
  # StreamingPaymentProcessor address
  id: ID!
  chainId: Int!
  workflow: Workflow!
  vestings: [LinearVesting!]! @derivedFrom(field: "streamingPaymentProcessor")
}

enum VestingStatus {
  ACTIVE
  CANCELLED
}

type LinearVesting {
  # concat(recipient,'-',streamId)
  id: ID!
  # chainId
  chainId: Int!
  # streamingPaymentProcessor struct
  streamingPaymentProcessor: StreamingPaymentProcessor!
  # token address
  token: String!
  # amountRaw (not formatted)
  amountRaw: BigInt!
  # recipient address
  recipient: String!
  # start timestamp
  start: BigInt!
  # cliff timestamp
  cliff: BigInt!
  # end timestamp
  end: BigInt!
  # status of vesting
  status: VestingStatus!
  # blockTimestamp of vesting
  blockTimestamp: Int!
}

type Token @entity {
  # token address + chainId (chainId-address)
  id: ID!
  # address of token
  address: String!
  # chainId
  chainId: Int!
  # token decimals
  decimals: Int!
}

type IssuanceTokenDayData @entity {
  # token address concatendated with date
  id: ID!
  # timestamp rounded to current day by dividing by 86400
  date: Int!
  # pointer to token
  token: Token!
  # volume in token units
  volumeInCol: BigInt!

  # project fee in Collateral
  projectFeeInCol: BigInt!
  # protocol fee in Collateral
  protocolFeeInCol: BigInt!
  # project fee in Issuance
  projectFeeInIssuance: BigInt!

  # opening price Collateral
  openInCol: BigInt!
  # high price Collateral
  highInCol: BigInt!
  # low price Collateral
  lowInCol: BigInt!
  # close price Collateral
  closeInCol: BigInt!
}

type IssuanceTokenHourData @entity {
  # token address concatendated with date
  id: ID!
  # unix timestamp for start of hour
  periodStartUnix: Int!
  # pointer to token
  token: Token!
  # volume in token units
  volumeInCol: BigInt!

  # project fee in Collateral
  projectFeeInCol: BigInt!
  # protocol fee in Collateral
  protocolFeeInCol: BigInt!
  # project fee in Issuance
  projectFeeInIssuance: BigInt!

  # opening price Collateral
  openInCol: BigInt!
  # high price Collateral
  highInCol: BigInt!
  # low price Collateral
  lowInCol: BigInt!
  # close price Collateral
  closeInCol: BigInt!
}

type BountyModule {
  id: ID!
  chainId: Int!
  workflow: Workflow!
  bounties: [Bounty!]! @derivedFrom(field: "bountyModule")
}

type Bounty {
  id: ID!
  bountyModule: BountyModule!
  minimumPayoutAmount: BigInt!
  maximumPayoutAmount: BigInt!
  details: String!
  locked: Boolean
  claims: [BountyClaim!]! @derivedFrom(field: "bounty")
}

type BountyClaim {
  id: ID!
  bounty: Bounty!
  details: String!
  claimed: Boolean
  contributors: [BountyContributor!]! @derivedFrom(field: "bountyClaim")
}

type BountyContributor {
  id: ID!
  bountyClaim: BountyClaim!
  address: String!
  claimAmount: BigInt!
}

type DepositVault {
  id: ID!
  chainId: Int!
  workflow: Workflow!
  balance: BigInt
  deposits: [Deposit!]! @derivedFrom(field: "depositVault")
  transfers: [Transfer!]! @derivedFrom(field: "depositVault")
}

type Deposit {
  id: ID!
  depositVault: DepositVault!
  depositor: String!
  amount: BigInt!
  blockTimestamp: Int!
}

type Transfer {
  id: ID!
  depositVault: DepositVault!
  recipient: String!
  amount: BigInt!
  blockTimestamp: Int!
}
