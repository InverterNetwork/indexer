## WORKFLOW CORE ENTITIES
## ------------------------------------------------------------

type Workflow {
  id: ID! # ${orchestrator}-${chainId}
  chainId: Int!
  address: String!

  orchestrator: String!
  fundingManager: WorkflowModule!
  authorizer: WorkflowModule!
  paymentProcessor: WorkflowModule!
  optionalModules: [String!]
}

type WorkflowModuleType {
  id: ID! # identifier is keccak256 hash of parts of metadata
  chainId: Int!

  url: String!
  beacon: String!
  name: String!

  majorVersion: BigInt!
  minorVersion: BigInt!
  patchVersion: BigInt!
}

type WorkflowModule {
  id: ID! # ${address}-${chainId}
  chainId: Int!
  address: String!

  orchestrator: String!
  moduleType: WorkflowModuleType!
}

## ------------------------------------------------------------
## AUTHORIZERS
## ------------------------------------------------------------

type AutRoles {
  id: ID! # ${address}-${chainId}
  chainId: Int!
  address: String!

  workflow: Workflow!

  roles: [Role!]! @derivedFrom(field: "module_id")
}

enum RoleStatus {
  GRANTED
  REVOKED
}

type Role {
  id: ID! # ${autRoles_id}-${role}
  chainId: Int!

  role: String!
  roleName: String!
  roleGen: String!

  initiator: String!
  recipient: String!

  module_id: ID! @index
  status: RoleStatus!
}

type Token @entity {
  id: ID! # `${address}-${chainId}`
  chainId: Int!
  address: String!

  decimals: Int!
  name: String!
  symbol: String!

  totalSupply: BigDecimal!

  priceUSD: BigDecimal!
}

## ------------------------------------------------------------
## ISSUANCE TOKEN MARKET DATA
## ------------------------------------------------------------

type IssuanceTokenDayData @entity {
  id: ID! # `${token.address}-${chainId}-${dayID}`
  date: Int! # timestamp rounded to current day by dividing by 86400
  chainId: Int!
  address: String!

  token_id: ID! @index

  volumeUSD: BigDecimal!
  volumeISS: BigDecimal!

  projectFeeUSD: BigDecimal!

  protocolFeeUSD: BigDecimal!
  protocolFeeISS: BigDecimal!

  priceUSD: BigDecimal!

  openUSD: BigDecimal!
  highUSD: BigDecimal!
  lowUSD: BigDecimal!
  closeUSD: BigDecimal!
}

type IssuanceTokenHourData @entity {
  id: ID! # `${token.address}-${chainId}-${hourID}`
  periodStartUnix: Int! # unix timestamp for start of hour
  chainId: Int!
  address: String!

  token_id: ID! @index

  volumeUSD: BigDecimal!
  volumeISS: BigDecimal!

  projectFeeUSD: BigDecimal!

  protocolFeeUSD: BigDecimal!
  protocolFeeISS: BigDecimal!

  priceUSD: BigDecimal!

  openUSD: BigDecimal!
  highUSD: BigDecimal!
  lowUSD: BigDecimal!
  closeUSD: BigDecimal!
}

## ------------------------------------------------------------
## FUNDING MANAGER MARKET DATA
## ------------------------------------------------------------

type BondingCurveDayData @entity {
  id: ID! # `${bc.id}-${chainId}-${dayID}`
  module_id: ID! @index
  date: Int! # timestamp rounded to current day by dividing by 86400
  chainId: Int!
  address: String!

  collateralToken: Token!
  issuanceToken: Token!

  volumeUSD: BigDecimal!
  volumeCOL: BigDecimal!
  volumeISS: BigDecimal!

  projectFeeUSD: BigDecimal!
  projectFeeCOL: BigDecimal!

  protocolFeeUSD: BigDecimal!
  protocolFeeCOL: BigDecimal!
  protocolFeeISS: BigDecimal!

  priceUSD: BigDecimal!
  priceCOL: BigDecimal!

  openCOL: BigDecimal!
  highCOL: BigDecimal!
  lowCOL: BigDecimal!
  closeCOL: BigDecimal!

  openUSD: BigDecimal!
  highUSD: BigDecimal!
  lowUSD: BigDecimal!
  closeUSD: BigDecimal!
}

type BondingCurveHourData @entity {
  id: ID! # `${bc.id}-${chainId}-${hourID}`
  module_id: ID! @index
  periodStartUnix: Int! # unix timestamp for start of hour
  chainId: Int!
  address: String!

  collateralToken: Token!
  issuanceToken: Token!

  volumeUSD: BigDecimal!
  volumeCOL: BigDecimal!
  volumeISS: BigDecimal!

  projectFeeUSD: BigDecimal!
  projectFeeCOL: BigDecimal!

  protocolFeeUSD: BigDecimal!
  protocolFeeCOL: BigDecimal!
  protocolFeeISS: BigDecimal!

  priceUSD: BigDecimal!
  priceCOL: BigDecimal!

  openCOL: BigDecimal!
  highCOL: BigDecimal!
  lowCOL: BigDecimal!
  closeCOL: BigDecimal!

  openUSD: BigDecimal!
  highUSD: BigDecimal!
  lowUSD: BigDecimal!
  closeUSD: BigDecimal!
}

## ------------------------------------------------------------
## SWAPS
## ------------------------------------------------------------

enum SwapType {
  BUY
  SELL
}

type Swap {
  id: ID! # `${event.block.hash}-${event.logIndex}`
  chainId: Int!
  module_id: ID! @index

  blockTimestamp: Int!

  swapType: SwapType!

  initiator: String!
  recipient: String!

  issuanceToken: Token!
  collateralToken: Token!

  priceCOL: BigDecimal!
  priceUSD: BigDecimal!

  amountISS: BigDecimal!
  amountCOL: BigDecimal!
  amountUSD: BigDecimal!
}

## ------------------------------------------------------------
## FUNDING MANAGERS
## ------------------------------------------------------------

## BONDING CURVE ENTITIES
## ------------------------------------------------------------

type BondingCurve {
  id: ID! # `${address}-${chainId}`
  chainId: Int!
  address: String!

  bcType: String # restricted or not restricted
  workflow: Workflow!

  issuanceToken: Token!
  collateralToken: Token!

  buyFee: BigInt!
  sellFee: BigInt!

  virtualCOL: BigDecimal!
  virtualISS: BigDecimal!

  buyReserveRatio: BigInt!
  sellReserveRatio: BigInt!

  reserveCOL: BigDecimal!
  reserveUSD: BigDecimal!

  swaps: [Swap!]! @derivedFrom(field: "module_id")
  projectFees: [ProjectFee!]! @derivedFrom(field: "module_id")
  protocolFees: [ProtocolFee!]! @derivedFrom(field: "module_id")

  bondingCurveDayData: [BondingCurveDayData!]! @derivedFrom(field: "module_id")
  bondingCurveHourData: [BondingCurveHourData!]!
    @derivedFrom(field: "module_id")

  issuanceTokenDayData: [IssuanceTokenDayData!]! @derivedFrom(field: "token_id")
  issuanceTokenHourData: [IssuanceTokenHourData!]!
    @derivedFrom(field: "token_id")
}

enum FeeSource {
  ISSUANCE
  COLLATERAL
}

type ProtocolFee {
  id: ID! # `${event.block.hash}-${event.logIndex}`
  chainId: Int!
  module_id: ID! @index

  source: FeeSource!
  blockTimestamp: Int!

  token: Token!

  treasury: String!

  amount: BigDecimal!
  amountUSD: BigDecimal!
}

type ProjectFee {
  id: ID! # `${event.block.hash}-${event.logIndex}`
  chainId: Int!
  module_id: ID! @index

  blockTimestamp: Int!

  token: Token!

  recipient: String!

  amount: BigDecimal!
  amountUSD: BigDecimal!
}

## DEPOSIT VAULT ENTITIES
## ------------------------------------------------------------

type DepositVault {
  id: ID! # `${address}-${chainId}`
  chainId: Int!
  address: String!

  token: Token!

  workflow: Workflow!

  balance: BigDecimal!
  balanceUSD: BigDecimal!

  deposits: [Deposit!]! @derivedFrom(field: "depositVault")
  transfers: [Transfer!]! @derivedFrom(field: "depositVault")
}

type Deposit {
  id: ID! # `${depositVault.id}-${event.logIndex}`
  blockTimestamp: Int!

  depositVault: DepositVault!
  depositor: String!

  amount: BigDecimal!
  amountUSD: BigDecimal!
}

type Transfer {
  id: ID! # `${depositVault.id}-${event.logIndex}`
  blockTimestamp: Int!
  depositVault: DepositVault!

  recipient: String!

  amount: BigDecimal!
  amountUSD: BigDecimal!
}

## ------------------------------------------------------------
## LOGIC MODULES
## ------------------------------------------------------------

## BOUNTY ENTITIES
## ------------------------------------------------------------

type BountyModule {
  id: ID! # `${address}-${chainId}`
  chainId: Int!
  address: String!

  workflow: Workflow!
  bounties: [Bounty!]! @derivedFrom(field: "bountyModule")
}

type Bounty {
  id: ID! # `${bountyModule.id}-${bountyId}`
  bountyModule: BountyModule!
  minimumPayoutAmount: BigDecimal!
  maximumPayoutAmount: BigDecimal!
  details: String!
  locked: Boolean
  claims: [BountyClaim!]! @derivedFrom(field: "bounty")
}

type BountyClaim {
  id: ID! # `${bountyModule.id}-${claimId}`
  bounty: Bounty!
  details: String!
  claimed: Boolean
  contributors: [BountyContributor!]! @derivedFrom(field: "bountyClaim")
}

type BountyContributor {
  id: ID! # `${bountyId}-${event.params.claimId}-${index}`
  address: String!

  bountyClaim: BountyClaim!
  claimAmount: BigDecimal!
}

## STREAMING PAYMENT PROCESSOR ENTITIES
## ------------------------------------------------------------

type StreamingPaymentProcessor {
  id: ID! # StreamingPaymentProcessor address
  chainId: Int!
  address: String!

  workflow: Workflow!
  vestings: [LinearVesting!]! @derivedFrom(field: "streamingPaymentProcessor")
}

enum VestingStatus {
  ACTIVE
  CANCELLED
}

type LinearVesting {
  id: ID! # concat(recipient,'-',streamId)
  chainId: Int!
  blockTimestamp: Int!

  streamingPaymentProcessor: StreamingPaymentProcessor!

  token: Token!

  amount: BigDecimal!
  recipient: String!

  start: BigInt!
  cliff: BigInt!
  end: BigInt!

  status: VestingStatus!
}
