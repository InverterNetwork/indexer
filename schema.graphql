## =============================================================================
## ENUMS
## =============================================================================

enum SourceTokenType {
  ISSUANCE
  COLLATERAL
}

enum SwapType {
  BUY
  SELL
}

enum RoleStatus {
  GRANTED
  REVOKED
}

enum VestingStatus {
  ACTIVE
  CANCELLED
}

enum RedemptionState {
  PROCESSED
  CANCELLED
  PENDING
  FAILED
}

enum PaymentOrderType {
  PAYMENT
  QUEUED
}

## =============================================================================
## CORE ENTITIES
## =============================================================================

# Base token entity used throughout the schema
type Token @entity {
  id: ID! # `${chainId}-${address}`
  chainId: Int!
  address: String!

  decimals: Int!
  name: String!
  symbol: String!

  totalSupply: BigDecimal!

  priceUSD: BigDecimal!
}

type ProtocolFee {
  id: ID! # `${event.block.hash}-${event.logIndex}`
  chainId: Int!
  module_id: ID! @index

  source: SourceTokenType!
  timestamp: Int!

  token: Token!

  treasury: String!

  amount: BigDecimal!
  amountUSD: BigDecimal!
}

type ProjectFee {
  id: ID! # `${event.block.hash}-${event.logIndex}`
  chainId: Int!
  module_id: ID! @index

  timestamp: Int!

  token: Token!

  recipient: String!

  amount: BigDecimal!
  amountUSD: BigDecimal!
}

## =============================================================================
## WORKFLOW SYSTEM
## =============================================================================

type Workflow {
  id: ID! # ${chainId}-${address}
  chainId: Int!
  address: String!

  token: Token!

  orchestrator: String!
  fundingManager: WorkflowModule!
  authorizer: WorkflowModule!
  paymentProcessor: WorkflowModule!
  optionalModules: [String!]
}

type WorkflowModuleType {
  id: ID! # identifier is keccak256 hash of parts of metadata
  chainId: Int!

  url: String!
  beacon: String!
  name: String!

  majorVersion: BigInt!
  minorVersion: BigInt!
  patchVersion: BigInt!
}

type WorkflowModule {
  id: ID! # ${chainId}-${address}
  chainId: Int!
  address: String!

  orchestrator: String!
  moduleType: WorkflowModuleType!
}

## =============================================================================
## AUTHORIZATION SYSTEM
## =============================================================================

type AutRoles {
  id: ID! # ${chainId}-${address}
  chainId: Int!
  address: String!

  workflow: Workflow!

  roles: [Role!]! @derivedFrom(field: "module_id")
}

type Role {
  id: ID! # ${module_id}-${roleGen}-${recipient}
  chainId: Int!

  role: String
  roleName: String
  roleGen: String!

  initiator: String!
  recipient: String!

  module_id: ID! @index
  status: RoleStatus!
}

## =============================================================================
## FUNDING MANAGERS
## =============================================================================

# Base Transaction Types
type Swap {
  id: ID! # `${event.block.hash}-${event.logIndex}`
  chainId: Int!
  fundingManager_id: ID! @index

  timestamp: Int!

  swapType: SwapType!

  initiator: String!
  recipient: String!

  issuanceToken: Token!
  collateralToken: Token!

  priceCOL: BigDecimal!
  priceUSD: BigDecimal!

  amountISS: BigDecimal!
  amountCOL: BigDecimal!
  amountUSD: BigDecimal!
}

# Bonding Curve
type BondingCurve {
  id: ID! # `${chainId}-${address}`
  chainId: Int!
  address: String!

  bcType: String # restricted or not restricted
  workflow: Workflow!

  issuanceToken: Token!
  collateralToken: Token!

  buyFee: BigInt!
  sellFee: BigInt!

  virtualCOL: BigDecimal!
  virtualISS: BigDecimal!

  buyReserveRatio: BigInt!
  sellReserveRatio: BigInt!

  reserveCOL: BigDecimal!
  reserveUSD: BigDecimal!

  swaps: [Swap!]! @derivedFrom(field: "fundingManager_id")

  projectFees: [ProjectFee!]! @derivedFrom(field: "module_id")
  protocolFees: [ProtocolFee!]! @derivedFrom(field: "module_id")

  curveDayData: [CurveDayData!]! @derivedFrom(field: "fundingManager_id")
  curveHourData: [CurveHourData!]! @derivedFrom(field: "fundingManager_id")

  issuanceTokenDayData: [IssuanceTokenDayData!]! @derivedFrom(field: "token_id")
  issuanceTokenHourData: [IssuanceTokenHourData!]!
    @derivedFrom(field: "token_id")
}

# Deposit Vault
type DepositVault {
  id: ID! # `${chainId}-${address}`
  chainId: Int!
  address: String!

  token: Token!

  workflow: Workflow!

  balance: BigDecimal!
  balanceUSD: BigDecimal!

  deposits: [Deposit!]! @derivedFrom(field: "depositVault")
  transfers: [Transfer!]! @derivedFrom(field: "depositVault")
}

type Deposit {
  id: ID! # `${chainId}-${event.transaction}`
  timestamp: Int!

  depositVault: DepositVault!
  depositor: String!

  amount: BigDecimal!
  amountUSD: BigDecimal!
}

type Transfer {
  id: ID! # `${chainId}-${event.transaction}`
  timestamp: Int!

  depositVault: DepositVault!
  recipient: String!

  amount: BigDecimal!
  amountUSD: BigDecimal!
}

# Oracle Price
type OraclePriceFM {
  id: ID! # `${chainId}-${address}`
  chainId: Int!
  address: String!

  workflow: Workflow!

  externalPriceSetter: ExternalPriceSetter

  issuanceToken: Token!
  collateralToken: Token!

  buyFee: BigInt!
  sellFee: BigInt!

  swaps: [Swap!]! @derivedFrom(field: "fundingManager_id")
  projectFees: [ProjectFee!]! @derivedFrom(field: "module_id")
  protocolFees: [ProtocolFee!]! @derivedFrom(field: "module_id")
  paymentOrders: [RedemptionPaymentOrder!]! @derivedFrom(field: "oraclePriceFM")

  pendingRedemptionCOL: BigDecimal!
  pendingRedemptionUSD: BigDecimal!

  reserveCOL: BigDecimal!
  reserveUSD: BigDecimal!
}

type RedemptionPaymentOrder {
  id: ID! # `${chainId}-${event.transaction}`
  chainId: Int!

  timestamp: Int!
  executedTimestamp: Int

  orderId: BigInt!

  originChainId: Int!
  targetChainId: Int!

  orderType: PaymentOrderType!
  state: RedemptionState!

  token: Token!

  oraclePriceFM: OraclePriceFM!

  recipient: String!
  seller: String!
  executedBy: String

  feePercentage: BigInt!

  exchangeRate: BigDecimal!
  amount: BigDecimal!
  amountUSD: BigDecimal!

  # TODO: Investigate if we can use ProtocolFee & ProjectFee entities
  fee: BigDecimal!
  feeUSD: BigDecimal!

  flags: Bytes!
  data: [Bytes!]!
}

## =============================================================================
## LOGIC MODULES
## =============================================================================

# External Price
type ExternalPriceSetter {
  id: ID! # `${chainId}-${address}`
  chainId: Int!
  address: String!

  workflow: Workflow!

  issuanceToken: Token!
  collateralToken: Token!

  priceISS: BigDecimal!
  priceCOL: BigDecimal!
  priceUSD: BigDecimal!
}

# Bounty System
type BountyModule {
  id: ID! # `${chainId}-${address}`
  chainId: Int!
  address: String!

  token: Token!

  workflow: Workflow!
  bounties: [Bounty!]! @derivedFrom(field: "bountyModule")
}

type Bounty {
  id: ID! # `${moduleId}-${event.params.bountyId}`
  bountyModule: BountyModule!

  minimumPayoutAmount: BigDecimal!
  maximumPayoutAmount: BigDecimal!

  minimumPayoutAmountUSD: BigDecimal!
  maximumPayoutAmountUSD: BigDecimal!

  details: String!
  locked: Boolean
  claims: [BountyClaim!]! @derivedFrom(field: "bounty")
}

type BountyClaim {
  id: ID! # `${moduleId}-${event.params.claimId}`
  bounty: Bounty!
  details: String!
  claimed: Boolean
  contributors: [BountyContributor!]! @derivedFrom(field: "bountyClaim")
}

type BountyContributor {
  id: ID! # `${moduleId}-${event.params.claimId}-${contributorIndex}`
  address: String!

  bountyClaim: BountyClaim!

  claimAmount: BigDecimal!
  claimAmountUSD: BigDecimal!
}

# Streaming Payments
type StreamingPaymentProcessor {
  id: ID! # StreamingPaymentProcessor address
  chainId: Int!
  address: String!

  workflow: Workflow!
  vestings: [LinearVesting!]! @derivedFrom(field: "streamingPaymentProcessor")
}

type LinearVesting {
  id: ID! # `${recipient}-${streamId}`
  chainId: Int!
  timestamp: Int!

  streamingPaymentProcessor: StreamingPaymentProcessor!

  token: Token!

  amount: BigDecimal!
  recipient: String!

  start: BigInt!
  cliff: BigInt!
  end: BigInt!

  status: VestingStatus!
}

## =============================================================================
## MARKET DATA
## =============================================================================

# Issuance Token Market Data
type IssuanceTokenDayData @entity {
  id: ID! # `${token_id}-${dayID}`
  date: Int! # timestamp rounded to current day by dividing by 86400
  chainId: Int!
  address: String!

  token_id: ID! @index

  volumeUSD: BigDecimal!
  volumeISS: BigDecimal!

  projectFeeUSD: BigDecimal!

  protocolFeeUSD: BigDecimal!
  protocolFeeISS: BigDecimal!

  priceUSD: BigDecimal!

  openUSD: BigDecimal!
  highUSD: BigDecimal!
  lowUSD: BigDecimal!
  closeUSD: BigDecimal!
}

type IssuanceTokenHourData @entity {
  id: ID! # `${token_id}-${hourID}`
  periodStartUnix: Int! # unix timestamp for start of hour
  chainId: Int!
  address: String!

  token_id: ID! @index

  volumeUSD: BigDecimal!
  volumeISS: BigDecimal!

  projectFeeUSD: BigDecimal!

  protocolFeeUSD: BigDecimal!
  protocolFeeISS: BigDecimal!

  priceUSD: BigDecimal!

  openUSD: BigDecimal!
  highUSD: BigDecimal!
  lowUSD: BigDecimal!
  closeUSD: BigDecimal!
}

# Funding Manager Market Data
type CurveDayData @entity {
  id: ID! # `${fundingManager_id}-${dayID}`
  fundingManager_id: ID! @index

  date: Int! # timestamp rounded to current day by dividing by 86400
  chainId: Int!
  address: String!

  collateralToken: Token!
  issuanceToken: Token!

  volumeUSD: BigDecimal!
  volumeCOL: BigDecimal!
  volumeISS: BigDecimal!

  projectFeeUSD: BigDecimal!
  projectFeeCOL: BigDecimal!

  protocolFeeUSD: BigDecimal!
  protocolFeeCOL: BigDecimal!
  protocolFeeISS: BigDecimal!

  priceUSD: BigDecimal!
  priceCOL: BigDecimal!

  openCOL: BigDecimal!
  highCOL: BigDecimal!
  lowCOL: BigDecimal!
  closeCOL: BigDecimal!

  openUSD: BigDecimal!
  highUSD: BigDecimal!
  lowUSD: BigDecimal!
  closeUSD: BigDecimal!
}

type CurveHourData @entity {
  id: ID! # `${fundingManager_id}-${hourID}`
  fundingManager_id: ID! @index

  periodStartUnix: Int! # unix timestamp for start of hour
  chainId: Int!
  address: String!

  collateralToken: Token!
  issuanceToken: Token!

  volumeUSD: BigDecimal!
  volumeCOL: BigDecimal!
  volumeISS: BigDecimal!

  projectFeeUSD: BigDecimal!
  projectFeeCOL: BigDecimal!

  protocolFeeUSD: BigDecimal!
  protocolFeeCOL: BigDecimal!
  protocolFeeISS: BigDecimal!

  priceUSD: BigDecimal!
  priceCOL: BigDecimal!

  openCOL: BigDecimal!
  highCOL: BigDecimal!
  lowCOL: BigDecimal!
  closeCOL: BigDecimal!

  openUSD: BigDecimal!
  highUSD: BigDecimal!
  lowUSD: BigDecimal!
  closeUSD: BigDecimal!
}
