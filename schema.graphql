## WORKFLOW CORE ENTITIES
## ------------------------------------------------------------

type Workflow {
  id: ID! # orchestratorAddress
  orchestratorId: BigInt!
  fundingManager: WorkflowModule!
  authorizer: WorkflowModule!
  paymentProcessor: WorkflowModule!
  optionalModules: [String!]
  chainId: Int!
}

type WorkflowModuleType {
  id: ID! # identifier is keccak256 hash of parts of metadata
  majorVersion: BigInt!
  minorVersion: BigInt!
  patchVersion: BigInt!
  url: String!
  beacon: String!
  name: String!
  chainId: Int!
}

type WorkflowModule {
  id: ID! # address of module
  orchestrator: String!
  moduleType: WorkflowModuleType!
  chainId: Int!
}

type Token @entity {
  id: ID! # `${address}-${chainId}`
  chainId: Int!

  address: String!
  decimals: Int!
  totalSupply: BigDecimal!
  name: String!
  symbol: String!
}

## ------------------------------------------------------------
## ISSUANCE TOKEN MARKET DATA
## ------------------------------------------------------------

type IssuanceTokenDayData @entity {
  id: ID! # `${token.address}-${chainId}-${dayID}`
  chainId: Int!
  date: Int! # timestamp rounded to current day by dividing by 86400
  token: Token!
  volumeInCol: BigDecimal!
  volumeInIssuance: BigDecimal!

  projectFeeInCol: BigDecimal!

  protocolFeeInCol: BigDecimal!
  protocolFeeInIssuance: BigDecimal!

  priceInCol: BigDecimal!

  openInCol: BigDecimal!
  highInCol: BigDecimal!
  lowInCol: BigDecimal!
  closeInCol: BigDecimal!
}

type IssuanceTokenHourData @entity {
  id: ID! # `${token.address}-${chainId}-${hourIndex}`
  chainId: Int!
  periodStartUnix: Int! # unix timestamp for start of hour
  token: Token!
  volumeInCol: BigDecimal!
  volumeInIssuance: BigDecimal!

  projectFeeInCol: BigDecimal!

  protocolFeeInCol: BigDecimal!
  protocolFeeInIssuance: BigDecimal!

  priceInCol: BigDecimal!

  openInCol: BigDecimal!
  highInCol: BigDecimal!
  lowInCol: BigDecimal!
  closeInCol: BigDecimal!
}

enum SwapType {
  BUY
  SELL
}

type Swap {
  id: ID! # `${event.block.hash}-${event.logIndex}`
  chainId: Int!
  blockTimestamp: Int!
  bondingCurve: BondingCurve!

  swapType: SwapType!

  initiator: String!
  recipient: String!

  issuanceToken: Token!
  collateralToken: Token!

  issuanceAmount: BigDecimal!
  collateralAmount: BigDecimal!
  priceInCol: BigDecimal!
}

## ------------------------------------------------------------
## FUNDING MANAGERS
## ------------------------------------------------------------

## BONDING CURVE ENTITIES
## ------------------------------------------------------------

type BondingCurve {
  id: ID! # address of module
  chainId: Int!
  workflow: Workflow!

  collateralToken: Token!
  issuanceToken: Token!

  buyFee: BigInt
  sellFee: BigInt

  bcType: String # restricted or not restricted
  virtualCollateral: BigDecimal
  virtualIssuance: BigDecimal

  virtualCollateralRaw: BigInt
  buyReserveRatio: BigInt
  sellReserveRatio: BigInt

  swaps: [Swap!]! @derivedFrom(field: "bondingCurve")
  projectFees: [ProjectFee!]! @derivedFrom(field: "bondingCurve")
  protocolFees: [ProtocolFee!]! @derivedFrom(field: "bondingCurve")
}

enum FeeSource {
  ISSUANCE
  COLLATERAL
}

type ProtocolFee {
  id: ID! # `${event.block.hash}-${event.logIndex}`
  chainId: Int!
  source: FeeSource!

  token: Token!
  bondingCurve: BondingCurve!

  treasury: String!
  amount: BigDecimal!
}

type ProjectFee {
  id: ID! # `${event.block.hash}-${event.logIndex}`
  chainId: Int!
  blockTimestamp: Int!

  bondingCurve: BondingCurve!

  recipient: String!
  amount: BigDecimal!
}

## DEPOSIT VAULT ENTITIES
## ------------------------------------------------------------

type DepositVault {
  id: ID!
  chainId: Int!

  workflow: Workflow!

  balance: BigDecimal
  deposits: [Deposit!]! @derivedFrom(field: "depositVault")
  transfers: [Transfer!]! @derivedFrom(field: "depositVault")
}

type Deposit {
  id: ID! # `${depositVault.id}-${event.logIndex}`
  blockTimestamp: Int!

  depositVault: DepositVault!
  depositor: String!
  amount: BigDecimal!
}

type Transfer {
  id: ID! # `${depositVault.id}-${event.logIndex}`
  depositVault: DepositVault!

  recipient: String!
  amount: BigDecimal!
  blockTimestamp: Int!
}

## ------------------------------------------------------------
## LOGIC MODULES
## ------------------------------------------------------------

## BOUNTY ENTITIES
## ------------------------------------------------------------

type BountyModule {
  id: ID!
  chainId: Int!
  workflow: Workflow!
  bounties: [Bounty!]! @derivedFrom(field: "bountyModule")
}

type Bounty {
  id: ID!
  bountyModule: BountyModule!
  minimumPayoutAmount: BigDecimal!
  maximumPayoutAmount: BigDecimal!
  details: String!
  locked: Boolean
  claims: [BountyClaim!]! @derivedFrom(field: "bounty")
}

type BountyClaim {
  id: ID!
  bounty: Bounty!
  details: String!
  claimed: Boolean
  contributors: [BountyContributor!]! @derivedFrom(field: "bountyClaim")
}

type BountyContributor {
  id: ID!
  bountyClaim: BountyClaim!
  address: String!
  claimAmount: BigDecimal!
}

## STREAMING PAYMENT PROCESSOR ENTITIES
## ------------------------------------------------------------

type StreamingPaymentProcessor {
  id: ID! # StreamingPaymentProcessor address
  chainId: Int!
  workflow: Workflow!
  vestings: [LinearVesting!]! @derivedFrom(field: "streamingPaymentProcessor")
}

enum VestingStatus {
  ACTIVE
  CANCELLED
}

type LinearVesting {
  id: ID! # concat(recipient,'-',streamId)
  chainId: Int!
  streamingPaymentProcessor: StreamingPaymentProcessor!
  token: String!
  amountRaw: BigInt! # not formatted
  recipient: String!
  start: BigInt!
  cliff: BigInt!
  end: BigInt!
  status: VestingStatus!
  blockTimestamp: Int!
}
