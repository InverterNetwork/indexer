## WORKFLOW CORE ENTITIES
## ------------------------------------------------------------

type Workflow {
  id: ID! # orchestratorAddress
  orchestratorId: BigInt!
  fundingManager: WorkflowModule!
  authorizer: WorkflowModule!
  paymentProcessor: WorkflowModule!
  optionalModules: [String!]
  chainId: Int!
}

type WorkflowModuleType {
  id: ID! # identifier is keccak256 hash of parts of metadata
  majorVersion: BigInt!
  minorVersion: BigInt!
  patchVersion: BigInt!
  url: String!
  beacon: String!
  name: String!
  chainId: Int!
}

type WorkflowModule {
  id: ID! # address of module
  orchestrator: String!
  moduleType: WorkflowModuleType!
  chainId: Int!
}

type Token @entity {
  id: ID! # `${address}-${chainId}`
  address: String!
  chainId: Int!
  decimals: Int!
}

## ------------------------------------------------------------
## ISSUANCE TOKEN MARKET DATA
## ------------------------------------------------------------

type IssuanceTokenDayData @entity {
  id: ID! # `${token.address}-${chainId}-${dayID}`
  chainId: Int!
  date: Int! # timestamp rounded to current day by dividing by 86400
  token: Token!
  volumeInCol: Float!
  volumeInIssuance: Float!
  projectFeeInCol: Float!
  protocolFeeInCol: Float!
  projectFeeInIssuance: Float!
  openInCol: Float!
  highInCol: Float!
  lowInCol: Float!
  closeInCol: Float!
}

type IssuanceTokenHourData @entity {
  id: ID! # `${token.address}-${chainId}-${hourIndex}`
  chainId: Int!
  periodStartUnix: Int! # unix timestamp for start of hour
  token: Token!
  volumeInCol: Float!
  volumeInIssuance: Float!
  projectFeeInCol: Float!
  protocolFeeInCol: Float!
  projectFeeInIssuance: Float!
  openInCol: Float!
  highInCol: Float!
  lowInCol: Float!
  closeInCol: Float!
}

enum SwapType {
  BUY
  SELL
}

type Swap {
  id: ID!
  chainId: Int!
  blockTimestamp: Int!
  bondingCurve: BondingCurve!
  swapType: SwapType!
  initiator: String!
  recipient: String!
  issuanceToken: Token!
  collateralToken: Token!
  issuanceAmount: Float!
  collateralAmount: Float!
  priceInCol: Float!
}

## ------------------------------------------------------------
## FUNDING MANAGERS
## ------------------------------------------------------------

## BONDING CURVE ENTITIES
## ------------------------------------------------------------

type BondingCurve {
  id: ID! # address of module
  chainId: Int!
  workflow: Workflow!
  collateralToken: Token!
  buyFee: BigInt
  bcType: String # restricted or not restricted
  sellFee: BigInt
  virtualCollateral: Float
  virtualCollateralRaw: BigInt
  virtualIssuance: Float
  buyReserveRatio: BigInt
  sellReserveRatio: BigInt
  issuanceToken: Token!
  swaps: [Swap!]! @derivedFrom(field: "bondingCurve")
  feeClaim: [FeeClaim!]! @derivedFrom(field: "bondingCurve")
}

type FeeClaim {
  id: ID!
  bondingCurve: BondingCurve!
  amount: Float!
  blockTimestamp: Int!
  chainId: Int!
  recipient: String!
}

## DEPOSIT VAULT ENTITIES
## ------------------------------------------------------------

type DepositVault {
  id: ID!
  chainId: Int!
  workflow: Workflow!
  balance: BigInt
  deposits: [Deposit!]! @derivedFrom(field: "depositVault")
  transfers: [Transfer!]! @derivedFrom(field: "depositVault")
}

type Deposit {
  id: ID!
  depositVault: DepositVault!
  depositor: String!
  amount: BigInt!
  blockTimestamp: Int!
}

type Transfer {
  id: ID!
  depositVault: DepositVault!
  recipient: String!
  amount: BigInt!
  blockTimestamp: Int!
}

## ------------------------------------------------------------
## LOGIC MODULES
## ------------------------------------------------------------

## BOUNTY ENTITIES
## ------------------------------------------------------------

type BountyModule {
  id: ID!
  chainId: Int!
  workflow: Workflow!
  bounties: [Bounty!]! @derivedFrom(field: "bountyModule")
}

type Bounty {
  id: ID!
  bountyModule: BountyModule!
  minimumPayoutAmount: BigInt!
  maximumPayoutAmount: BigInt!
  details: String!
  locked: Boolean
  claims: [BountyClaim!]! @derivedFrom(field: "bounty")
}

type BountyClaim {
  id: ID!
  bounty: Bounty!
  details: String!
  claimed: Boolean
  contributors: [BountyContributor!]! @derivedFrom(field: "bountyClaim")
}

type BountyContributor {
  id: ID!
  bountyClaim: BountyClaim!
  address: String!
  claimAmount: BigInt!
}

## STREAMING PAYMENT PROCESSOR ENTITIES
## ------------------------------------------------------------

type StreamingPaymentProcessor {
  id: ID! # StreamingPaymentProcessor address
  chainId: Int!
  workflow: Workflow!
  vestings: [LinearVesting!]! @derivedFrom(field: "streamingPaymentProcessor")
}

enum VestingStatus {
  ACTIVE
  CANCELLED
}

type LinearVesting {
  id: ID! # concat(recipient,'-',streamId)
  chainId: Int!
  streamingPaymentProcessor: StreamingPaymentProcessor!
  token: String!
  amountRaw: BigInt! # not formatted
  recipient: String!
  start: BigInt!
  cliff: BigInt!
  end: BigInt!
  status: VestingStatus!
  blockTimestamp: Int!
}
